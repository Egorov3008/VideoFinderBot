from collections.abc import Awaitable, Callable
from typing import Any
from aiogram import BaseMiddleware, html
from aiogram.types import TelegramObject, Update, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db import get_subscription
from utils_bot.utils import is_user_subscribed
from logger import logger
from config import ADMIN_ID

class SubscribeChannel(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[TelegramObject, dict[str, Any]], Awaitable[Any]],
            event: Update,
            data: dict[str, Any],
    ) -> Any:
        if user := data.get("event_from_user"):
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id} –Ω–∞ –∫–∞–Ω–∞–ª—ã")
            dict_sub = await get_subscription()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {dict_sub}")

            if dict_sub:
                dict_sub_users = {
                    (channel, url_sub): await is_user_subscribed(channel_url=url_sub, telegram_id=user.id) for channel, url_sub in dict_sub.items()
                }
                logger.debug(f"–°—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {dict_sub_users}")
                len_sub = len([v for v in dict_sub_users.values() if v])
                if not any(v for v in dict_sub_users.values() if v):
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤.")
                    builder = InlineKeyboardBuilder()
                    for channel, subscribed in dict_sub_users.items():

                        if not subscribed:
                            builder.row(InlineKeyboardButton(text=channel[0], url=channel[1]))
                    builder.row(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üìç", callback_data="check_subscription"))
                    if event.message:
                        await event.message.answer(f"üòä –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã,\n –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ"
                                                   f"–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üìç',\n –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –ø–æ–¥–ø–∏—à–µ—Ç–µ—Å—å.", reply_markup=builder.as_markup())
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
                    if event.callback_query:
                        await event.callback_query.message.answer(f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã", reply_markup=builder.as_markup())
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} —á–µ—Ä–µ–∑ callback_query")
                    return
                elif any(v for v in dict_sub_users.values() if v) or user.id in ADMIN_ID:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                    return await handler(event, data)
            return await handler(event, data)

        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç event_from_user.")


