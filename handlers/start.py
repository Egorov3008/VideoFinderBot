import os
import re

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, FSInputFile, CallbackQuery, )

from bot import bot
from config import kb_list
from db import get_user_by_id, add_user, update_bot_open_status
from kb import main_contact_kb, channels_kb
from logger import logger
from utils_bot.utils import is_user_subscribed
from utils_bot.utils_for_msg import is_valid_url, compress_video, split_video
from utils_bot.youtube import get_videos

router = Router()


@router.message(CommandStart())
async def start(message: Message):
    telegram_id = message.from_user.id
    user_data = await get_user_by_id(telegram_id)

    if user_data is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await add_user(
            telegram_id=telegram_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )
        bot_open = False
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å bot_open –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot_open = user_data.get('bot_open', False)  # –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False

    if not bot_open:
        # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        await message.answer(
            "–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=channels_kb(kb_list)
        )
    else:
        await start_msg(message)



URL_REGEX = r'^(https?://[^\s]+)$'

@router.message(lambda message: re.match(URL_REGEX, message.text))
async def handle_message(message: Message):
    text = message.text
    path_vidio = None
    if is_valid_url(text):
        try:
            await message.answer("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
            path_vidio = await get_videos(text)
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            if os.path.exists(path_vidio):
                file_size = os.path.getsize(path_vidio)
                logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {file_size}")
                if file_size >= 50 * 1024 * 1024:
                    logger.info("–§–∞–π–ª –±–æ–ª—å—à–µ 50 –º–±")
                    await message.answer("–í–∞—à–µ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —è —Ä–∞–∑–¥–µ–ª–∏–ª –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π üôå")
                    # output_path = path_vidio[:-2] + '_output_path.mp4'
                    # if compress_video(path_vidio, output_path):
                    list_video: list[str] = split_video(path_vidio, 50)
                    # os.remove(output_path)
                    for index in range(len(list_video)):
                            video_file = FSInputFile(list_video[index])
                            await message.answer_video(video=video_file, caption=f"—á–∞—Å—Ç—å {index + 1} ü§ó")
                            os.remove(list_video[index])

                else:
                    logger.info("–§–∞–π–ª –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–µ–Ω 50 –º–±")
                    video_file = FSInputFile(path_vidio)
                    await message.answer_video(video=video_file, caption=f"–í–∞—à–µ –≤–∏–¥–µ–æ ü§ó")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        except Exception as e:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        finally:
            if os.path.exists(path_vidio):
                os.remove(path_vidio)

    else:
        await message.answer("–≠—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.")

@router.callback_query(F.data == 'check_subscription')
async def check_subs_func(call: CallbackQuery):
    await call.answer('–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã')

    for channel in kb_list:
        label = channel.get('label')
        channel_url = channel.get('url')
        telegram_id = call.from_user.id
        check = await is_user_subscribed(channel_url, telegram_id)
        if check is False:
            await call.message.answer(f"‚ùå –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëâ {label}",
                                      reply_markup=channels_kb(kb_list))
            return False

    await update_bot_open_status(telegram_id=call.from_user.id, bot_open=True)
    await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞",
                              reply_markup=await main_contact_kb(call.from_user.id))


async def start_msg(message: Message):
    await message.answer("<b>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoFinderBot! üé•</b>\n\n"
                         "–Ø ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –≤–∏–¥–µ–æ! –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                         "‚úÖ –°–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube, Instagram, TikTok –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø–æ —Å—Å—ã–ª–∫–µ.\n"
                         "‚úÖ –í—ã–±–∏—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n"
                         "üé¨ –ö–∞–∫ –Ω–∞—á–∞—Ç—å?\n"
                         "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è –≤–∞—Å.\n\n"
                         "üöÄ –Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:\n"
                         "YouTube\n"
                         "Instagram (—Ä–µels)\n"
                         "TikTok\n\n"
                         "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /help, –∏ —è –ø–æ–º–æ–≥—É!\n"
                         "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ. üòä")
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª—è—é –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")
    await main_contact_kb(message.from_user.id)

