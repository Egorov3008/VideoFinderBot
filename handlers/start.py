import os
from typing import Optional, List, Dict

import validators
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardButton, CallbackQuery, )
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import SUPPORT_CHAT_URL, ADMIN_ID
from db import get_subscription, get_all_users, add_user
from logger import logger
from text_msg import start_message
from utils_bot.utils import is_user_subscribed
from utils_bot.download import video

router = Router()


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    is_admin = message.from_user.id in ADMIN_ID
    users = await get_all_users()
    if message.from_user.id not in [user_id["telegram_id"] for user_id in users]:
        await add_user(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name
        )
    if is_admin:
        builder.row(InlineKeyboardButton(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—åüö®", callback_data="admin_panel"))
    # builder.row(InlineKeyboardButton(text="–ê–¥–º–∏–Ω", url=SUPPORT_CHAT_URL))
    await start_msg(message, builder)


@router.message(lambda message: validators.url(message.text))
async def handle_message(message: Message):
    tg_id = message.from_user.id
    check_file_size = 200 * 1024 * 1024 if message.from_user.is_premium else 50 * 1024 * 1024
    if await check_substraction(tg_id, message):
        text = message.text
        await message.answer("–ò—â—É –∏ —Å–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ... üîç")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        path_vidio = None
        try:
            path_vidio = await video(text)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
            if path_vidio and os.path.exists(path_vidio):
                file_size = os.path.getsize(path_vidio)
                logger.info(f"–í–∏–¥–µ–æ –≤–µ—Å–∏—Ç: {file_size}")
                if file_size <= check_file_size:
                    # await bot.delete_messages(chat_id=msg_del.chat.id, message_ids=msg_del.message_id)
                    video_file = FSInputFile(path_vidio)

                    await message.answer_document(document=video_file, caption="–í–∞—à–µ –≤–∏–¥–µ–æ ü§ó")
                else:
                    await message.answer("–¢–∞–∫–æ–µ –±–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ —è –µ—â–µ –Ω–µ —É–º–µ—é —Å–∫–∞—á–∏–≤–∞—Ç—å ü§ï")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

        except Exception as e:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        finally:
            if os.path.exists(path_vidio):
                os.remove(path_vidio)


@router.callback_query(F.data == 'check_subscription')
async def check_subs_func(call: CallbackQuery):
    tg_id = call.from_user.id
    if await check_substraction(tg_id, call):
        await call.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É üôè\n'
                                  'üì• –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑\n'
                                  'Instagram, TikTok, YouTube, VK –∏–ª–∏ Pinterest\n '
                                  '–ò –±–æ—Ç —Å–∫–∞—á–∞–µ—Ç –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.')


async def start_msg(message: Message, kb: InlineKeyboardBuilder):
    text = start_message
    path_gif = "./img/aspose_video_133855528872978473_out.mp4"
    logger.info(f"–ü—É—Ç—å –∫ –≥–∏—Ñ–∫–µ: {os.path.exists(path_gif)}")
    if os.path.exists(path_gif):
        gif = FSInputFile(path_gif)
        await message.answer_animation(animation=gif, caption=text, reply_markup=kb.as_markup())
        return
    await message.answer(text, reply_markup=kb.as_markup())


async def check_substraction(tg_id, message: Message | CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã.
    """
    if tg_id in ADMIN_ID:
        return True

    logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {tg_id} –Ω–∞ –∫–∞–Ω–∞–ª—ã")

    try:
        list_sub: Optional[List[Dict]] = await get_subscription()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {list_sub}")

        if list_sub:
            dict_sub_users = {
                (channel, url_sub): await is_user_subscribed(channel_url=url_sub, telegram_id=tg_id)
                for dict_sub in list_sub
                for channel, url_sub in dict_sub.items()
            }
            logger.debug(f"–°—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {dict_sub_users}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            if not all(dict_sub_users.values()):  # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ª–æ–∂–Ω–∞—è
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤.")
                builder = InlineKeyboardBuilder()
                for (channel, url_sub), subscribed in dict_sub_users.items():
                    if not subscribed:
                        builder.row(InlineKeyboardButton(text=channel, url=url_sub))
                builder.row(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üìç", callback_data='check_subscription'))

                response_text = "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞,\n<b>–Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã:</b>"
                if isinstance(message, Message):
                    await message.answer(response_text, reply_markup=builder.as_markup())
                elif isinstance(message, CallbackQuery):
                    await message.message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã", reply_markup=builder.as_markup())

                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}")
                return False

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.")
            return True

        logger.info("–ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False