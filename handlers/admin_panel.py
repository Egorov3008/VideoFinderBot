import asyncio
from io import BytesIO
from typing import Optional, List, Dict

from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import html
from selenium.webdriver.common.devtools.v85.runtime import await_promise

from bot import bot
from db import get_all_users, get_subscription, add_sub_url, delete_subscription, get_user_counts, get_info_subscription
from filters.admin import IsAdminFilter
from kb import admin_kb, edit_sub
from logger import logger
from utils_bot.utils import msg_post, check_bot_status

router = Router()


class Form(StatesGroup):
    start_broadcast = State()
    sub_action = State()


class MediaGroupState(StatesGroup):
    waiting_for_media_group = State()
    send_media_group = State()


@router.callback_query(F.data == 'admin_panel', IsAdminFilter())
async def admin_handler(call: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = admin_kb()
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüëá', reply_markup=kb)


@router.callback_query(F.data == 'admin_users', IsAdminFilter())
async def admin_users_handler(call: CallbackQuery):
    await call.answer('–ì–æ—Ç–æ–≤–ª—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    users_data = await get_all_users()
    dict_users_added = await get_user_counts()

    text = (f'<b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. </b>\n\n'
            f'–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {dict_users_added["users_added_last_week"]}\n'
            f'–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {dict_users_added["users_added_last_month"]}\n')

    users = [(user["telegram_id"], user["subscription_time"]) for user in users_data]

    if not users:
        await call.message.answer(
            "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=admin_kb()
        )
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
    csv_data = "tg_id, –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ CSV
    for user in users:
        csv_data += f"{user[0]}, {user[1]}\n"

    csv_file = BytesIO(csv_data.encode("utf-8-sig"))
    csv_file.seek(0)

    csv_buffered_file = BufferedInputFile(csv_file.getvalue(), filename="users_export.csv")

    # –°–æ–∑–¥–∞–Ω–∏–µ TXT —Ñ–∞–π–ª–∞ —Å —Ç–æ–ª—å–∫–æ Telegram ID
    txt_data = "\n".join([str(user[0]) for user in users])  # –¢–æ–ª—å–∫–æ Telegram ID
    txt_file = BytesIO(txt_data.encode("utf-8-sig"))
    txt_file.seek(0)

    txt_buffered_file = BufferedInputFile(txt_file.getvalue(), filename="users_export.txt")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–æ–≤
    await call.message.answer_document(
        csv_buffered_file,
        caption=text,
    )

    await call.message.answer_document(
        txt_buffered_file,
        caption="üìú –°–ø–∏—Å–æ–∫ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        reply_markup=admin_kb(),
    )

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤
    csv_file.close()
    txt_file.close()


@router.callback_query(F.data == 'admin_broadcast', IsAdminFilter())
async def admin_broadcast_handler(call: CallbackQuery, state: FSMContext):
    await call.answer()
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='admin_panel'))
    await call.message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —è –µ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—á—É –∏ –ø–µ—Ä–µ—à–ª—é –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n'
        '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞:\n'
        '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã\n'
        '2. –ü–æ—Å–ª–µ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n'
        '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ üôÇ',
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.start_broadcast)


@router.callback_query(F.data == "subscription", IsAdminFilter())
async def handle_subscription(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    dict_subscription: Optional[List[Dict]] = await get_subscription()
    builder = InlineKeyboardBuilder()
    text = ''
    if dict_subscription:
        text = '<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: </b>'
        for data in dict_subscription:
            for k, v in data.items():
                builder.row(InlineKeyboardButton(text=f"{k}", callback_data=f"view_{v}"))
    else:
        text = "<b>–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> üëá"
    builder.row(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_sub"))
    builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_panel"))
    await callback.message.answer(text, reply_markup=builder.as_markup())


@router.message(Form.start_broadcast)
async def handle_media_group_start(message: Message, state: FSMContext):
    if message.media_group_id:
        logger.info("–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Å–±–æ—Ä—É –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã")
        data = await state.get_data()
        media_group = data.get("media_group", [])
        logger.info(f"–î–ª–∏–Ω–∞ media_group: {len(media_group)}")
        if media_group:
            logger.info("–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É")
            media_group.append(message)
            await state.update_data(media_group=media_group)
            return
        await state.update_data(media_group=[message])
        await state.set_state(MediaGroupState.send_media_group)
    else:
        good_send = 0
        bad_send = 0
        users_data = await get_all_users()
        buttons = InlineKeyboardBuilder()
        buttons.row(InlineKeyboardButton(text="–ê–¥–º–∏–Ω_–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        await message.answer(f'–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
        for user in users_data:
            try:
                chat_id = user.get('telegram_id')
                await message.copy_to(chat_id=chat_id)
                good_send += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bad_send += 1

        await state.clear()
        await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ <b>{good_send}</b>, '
                                     f'–ù–ï –ø–æ–ª—É—á–∏–ª–æ <b>{bad_send}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', reply_markup=admin_kb())


@router.message(F.text, MediaGroupState.send_media_group)
async def handle_text_msg(message: Message, state: FSMContext):
    good_send = 0
    bad_send = 0
    users_data = await get_all_users()
    buttons = InlineKeyboardBuilder()
    buttons.row(InlineKeyboardButton(text="–ê–¥–º–∏–Ω_–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    await message.answer(f'–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')

    for user in users_data:
        try:
            chat_id = user.get('telegram_id')
            await msg_post(message, state, chat_id=chat_id)
            good_send += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bad_send += 1


    await state.clear()
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ <b>{good_send}</b>, '
                                 f'–ù–ï –ø–æ–ª—É—á–∏–ª–æ <b>{bad_send}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', reply_markup=admin_kb())



@router.callback_query(F.data.startswith("view_"), IsAdminFilter())
async def handel_view_subscription(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–†–∞–±–æ—Ç–∞—é —Å –ø–æ–¥–ø–∏—Å–∫–æ–π {callback.data}")
    url_subscription = callback.data[5:]
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {url_subscription}")
    info_sub = await get_info_subscription(url_subscription)
    kb = edit_sub(url_subscription)
    await state.update_data(url_sub=url_subscription)
    link = html.link(info_sub["name_subscription"], info_sub["url_subscription"])
    activ_sub = "–ê–ö–¢–ò–í–ù–ê" if not info_sub["active"] else "–í–´–ü–û–õ–ù–ï–ù–û"
    channel_username: str = url_subscription.split('/')[-1]
    is_bot_admin = await check_bot_status(channel_username)
    state_bot = "–ê–¥–º–∏–Ω" if is_bot_admin else "–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"
    text = (f"<b>–ü–æ–¥–ø–∏—Å–∫–∞</b> {link}\n"
            f"<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</b> {activ_sub}\n"
            f"<b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ: {state_bot}</b>\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥–ø–∏—Å–∞–ª–æ—Å—å</b> {info_sub['users_actual']}\n"
            f"<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b> {info_sub['users_set']}")
    await callback.message.answer(text, reply_markup=kb.as_markup())


@router.callback_query(F.data == "add_sub", IsAdminFilter())
async def handle_add_sub(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö —Å–∏–º–≤–æ–ª–æ–º '|'.</b>\n"
        "–ü—Ä–∏–º–µ—Ä: üëá\n\nhttps://t.me/username|–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –ª–µ–≥–∫–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–º –¥–ª—è –≤–∞—Å.\n"
        "!!! –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å @username\n"
        "–ì—Ä—É–ø–ø—ã —Å —Ç–∞–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏: 'https://t.me/+b8i31D-0UHwzY2Ji' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º\n"
        "–î–æ–±–∞–≤–∏—Ç—å username")
    await state.set_state(Form.sub_action)


@router.message(F.text, Form.sub_action)
async def handle_url_sub(message: Message, state: FSMContext):
    list_msg = message.text.split("|")
    if len(list_msg) != 3:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    sub_url = list_msg[0]
    name_sub = list_msg[1]
    users_set = list_msg[2]
    await add_sub_url(name=name_sub, url_sub=sub_url, users_set=int(users_set))
    buttons = InlineKeyboardBuilder()
    buttons.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="subscription"))
    link = html.link('–∫–∞–Ω–∞–ª–∞', sub_url)
    await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω—ã {link}",
                         reply_markup=buttons.as_markup())


@router.callback_query(F.data.startswith("delete_"), IsAdminFilter())
async def handle_delete_sub(callback: CallbackQuery):
    url_subscription = callback.data[7:]
    logger.info(f"–£–¥–∞–ª—è—é –ø–æ–¥–ø–∏—Å–∫—É {url_subscription}")
    await delete_subscription(url_subscription)
    buttons = InlineKeyboardBuilder()
    buttons.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="subscription"))
    await callback.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=buttons.as_markup())


@router.callback_query(F.data == "edit", IsAdminFilter())
async def handle_edit_sub(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("<b>–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ:</b>"
                                  f"\n\nhttps://t.me/username|–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n")
    await state.set_state(Form.sub_action)
