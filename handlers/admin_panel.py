from io import BytesIO

from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import html
from db import get_all_users, get_subscription, add_sub_url, delete_subscription, get_user_counts, get_info_subscription
from filters.admin import IsAdminFilter
from kb import admin_kb, edit_sub
from logger import logger
from utils_bot.utils import broadcast_message

router = Router()


class Form(StatesGroup):
    start_broadcast = State()
    sub_action = State()


@router.callback_query(F.data == 'admin_panel', IsAdminFilter())
async def admin_handler(call: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = admin_kb()
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüëá', reply_markup=kb)


@router.callback_query(F.data == 'admin_users', IsAdminFilter())
async def admin_users_handler(call: CallbackQuery):
    await call.answer('–ì–æ—Ç–æ–≤–ª—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    users_data = await get_all_users()
    dict_users_added = await get_user_counts()

    text = (f'<b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. </b>\n\n'
            f'–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {dict_users_added["users_added_last_week"]}\n'
            f'–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {dict_users_added["users_added_last_month"]}\n')

    users = [(user["telegram_id"], user["subscription_time"]) for user in users_data]
    # logger.debug(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {users}")
    if not users:
        await call.message.answer(
            "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=admin_kb()
        )
        return

    csv_data = "tg_id, –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏\n"  # –ó–∞–≥–æ–ª–æ–≤—â–∫ CSV
    for user in users:
        csv_data += f"{user[0]}, {user[1]}\n"
        # logger.debug(f"{user[0]}, {user[1]}")

    file_name = BytesIO(csv_data.encode("utf-8-sig"))
    file_name.seek(0)

    file = BufferedInputFile(file_name.getvalue(), filename="users_export.xlsx")

    await call.message.answer_document(
        file,
        caption=text,
        reply_markup=admin_kb(),
    )
    file_name.close()


@router.callback_query(F.data == 'admin_broadcast', IsAdminFilter())
async def admin_broadcast_handler(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —è –µ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—á—É –∏ –ø–µ—Ä–µ—à–ª—é –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
    )
    await state.set_state(Form.start_broadcast)


@router.callback_query(F.data == "subscription", IsAdminFilter())
async def handle_subscription(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    dict_subscription: dict = await get_subscription()
    builder = InlineKeyboardBuilder()
    text = ''
    if dict_subscription:
        text = '<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: </b>'
        for k, v in dict_subscription.items():
            builder.row(InlineKeyboardButton(text=f"{k}", callback_data=f"view_{v}"))
    else:
        text = "<b>–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> üëá"
    builder.row(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_sub"))
    builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_panel"))
    await callback.message.answer(text, reply_markup=builder.as_markup())


@router.message(F.content_type.in_({'text', 'photo', 'document', 'video', 'audio'}), Form.start_broadcast,
                IsAdminFilter())
async def universe_broadcast(message: Message, state: FSMContext):
    users_data = await get_all_users()
    await message.answer(f'–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    content_type = message.content_type

    good_send, bad_send = await broadcast_message(
        users_data=users_data,
        text=message.text if content_type == ContentType.TEXT else None,
        photo_id=message.photo[-1].file_id if content_type == ContentType.PHOTO else None,
        document_id=message.document.file_id if content_type == ContentType.DOCUMENT else None,
        video_id=message.video.file_id if content_type == ContentType.VIDEO else None,
        audio_id=message.audio.file_id if content_type == ContentType.AUDIO else None,
        caption=message.caption,
        content_type=content_type
    )
    buttons = InlineKeyboardBuilder()
    buttons.row(InlineKeyboardButton(text="–ê–¥–º–∏–Ω_–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    await state.clear()
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ <b>{good_send}</b>, '
                         f'–ù–ï –ø–æ–ª—É—á–∏–ª–æ <b>{bad_send}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', reply_markup=admin_kb())


@router.callback_query(F.data.startswith("view_"), IsAdminFilter())
async def handel_view_subscription(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–†–∞–±–æ—Ç–∞—é —Å –ø–æ–¥–ø–∏—Å–∫–æ–π {callback.data}")
    url_subscription = callback.data[5:]
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {url_subscription}")
    info_sub = await get_info_subscription(url_subscription)
    kb = edit_sub(url_subscription)
    await state.update_data(url_sub=url_subscription)
    link = html.link(info_sub["name_subscription"], info_sub["url_subscription"])
    activ_sub = "–ê–ö–¢–ò–í–ù–ê" if not info_sub["active"] else "–í–´–ü–û–õ–ù–ï–ù–û"
    text = (f"<b>–ü–æ–¥–ø–∏—Å–∫–∞</b> {link}\n"
            f"<b>–°—Ç–∞—Ç—É—Å</b> {activ_sub}\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥–ø–∏—Å–∞–ª–æ—Å—å</b> {info_sub['users_actual']}\n"
            f"<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b> {info_sub['users_set']}")
    await callback.message.answer(text, reply_markup=kb.as_markup())


@router.callback_query(F.data == "add_sub", IsAdminFilter())
async def handle_add_sub(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö —Å–∏–º–≤–æ–ª–æ–º '|'.</b>\n"
                                  "–ü—Ä–∏–º–µ—Ä: üëá\n\nhttps://t.me/username|–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                                  "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –ª–µ–≥–∫–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–º –¥–ª—è –≤–∞—Å.")
    await state.set_state(Form.sub_action)


@router.message(F.text, Form.sub_action)
async def handle_url_sub(message: Message, state: FSMContext):
    list_msg = message.text.split("|")
    if len(list_msg) != 3:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    sub_url = list_msg[0]
    name_sub = list_msg[1]
    users_set = list_msg[2]
    await add_sub_url(name=name_sub, url_sub=sub_url, users_set=int(users_set))
    buttons = InlineKeyboardBuilder()
    buttons.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="subscription"))
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞", reply_markup=buttons.as_markup())


@router.callback_query(F.data.startswith("delete_"), IsAdminFilter())
async def handle_delete_sub(callback: CallbackQuery):
    url_subscription = callback.data[7:]
    logger.info(f"–£–¥–∞–ª—è—é –ø–æ–¥–ø–∏—Å–∫—É {url_subscription}")
    await delete_subscription(url_subscription)
    buttons = InlineKeyboardBuilder()
    buttons.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="subscription"))
    await callback.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=buttons.as_markup())

@router.callback_query(F.data == "edit", IsAdminFilter())
async def handle_edit_sub(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("<b>–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ:</b>"
                                  f"\n\nhttps://t.me/username|–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n")
    await state.set_state(Form.sub_action)
